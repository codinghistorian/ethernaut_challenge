Privacy
Difficulty 8/10

The creator of this contract was careful enough to protect the sensitive areas of its storage.

Unlock this contract to beat the level.

Things that might help:

Understanding how storage works
Understanding how parameter parsing works
Understanding how casting works
Tips:

Remember that metamask is just a commodity. Use another tool if it is presenting problems. Advanced gameplay could involve using remix, or your own web3 provider.


220314 15:09 KST
I think I just need to read the private data in the row.
I will just read this link below.

https://studygroup.moralis.io/t/how-to-read-private-variables/38777/2


the array that has key is in the 5th place(starting with zero) in storage, so

I guess I can just use this?

web3.eth.getStorageAt(contractAddress, 5, (a) => {
  console.log(a)
});

and I got 
0xa0036732b67dc0d2495d3d835c2637867b144ece5ab96af4b7458d49ea10b2de

I think I just need to split them.

into 3 peaces.

and the third element is turned into bytes16.

https://ethereum.stackexchange.com/questions/13143/how-can-i-split-a-bytes32-source-into-two-halfs-and-store-them-in-bytes16

maybe the bytes are empty?? i mean for the key.
cuz, when I accessed the private data with  getStorageAt, it only showed me on bytes32
the third one should be empty then.
maybe just 0x00000..to 16th byte? let's try

0x00000000000000000000000000000000

hm.. did not work.

what if I try this
0xa0036732b67dc0d2495d3d835c2637867b144ece5ab96af4b7458d49ea10b2de
0x00000000000000000000000000000000

oh, I just had to

0xa0036732b67dc0d2495d3d835c263786


Privacy
Level completed!
Difficulty 8/10

Nothing in the ethereum blockchain is private. The keyword private is merely an artificial construct of the Solidity language. Web3's getStorageAt(...) can be used to read anything from storage. It can be tricky to read what you want though, since several optimization rules and techniques are used to compact the storage as much as possible.

It can't get much more complicated than what was exposed in this level. For more, check out this excellent article by "Darius": How to read Ethereum contract storage

https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925

gotta read the link above carefully

15:38 KST.okay I will read the link below first and then read the link above.

https://coinyuppie.com/in-depth-understanding-of-evm-storage-mechanism-and-security-issues/#:~:text=Storage%20is%20a%20huge%20map,according%20to%20their%20specific%20types.&text=Stack%20is%20the%20so%2Dcalled,output%20data%20of%20EVM%20instructions.


15:48 KSt when uint128 and uint 32 are stored in sequence, they are merged in one slot.
to me, it is even shocking that in the slot, 32 is first stored and then 128 is stored.

endiennss of Ethereum.

https://jeancvllr.medium.com/solidity-tutorial-all-about-bytes-9d88fdb22676#:~:text=Ethereum%20uses%20the%20two%20endianness,%2C%20addresses%2C%20etc%E2%80%A6).

So, since 

Big endian format : strings and bytes
Little endian format : other types (numbers, addresses, etcâ€¦).

bytes are Big endian, timestamp was first stroed and then 17055 was stored after that.

https://medium.com/aigang-network/how-to-read-ethereum-contract-storage-44252c8af925


Reading mapping is a whole a lot difference since it needs key
index = '0000000000000000000000000000000000000000000000000000000000000005'
key =  '00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6'
let newKey =  web3.sha3(key + index, {"encoding":"hex"})
console.log(web3.eth.getStorageAt(contractAddress, newKey))
console.log('DEC: ' + web3.toDecimal(web3.eth.getStorageAt(contractAddress, newKey)))
result:
0x0000000000000000000000000000000000000000000000000000000000000058
DEC: 88


reading second struct value is even more interesting

To read second struct value you need to increase newKey value by 1
function increaseHexByOne(hex) {
 let x = new BigNumber(hex)
 let sum = x.add(1)
 let result = '0x' + sum.toString(16)
 return result
}
index = "0000000000000000000000000000000000000000000000000000000000000006"
key =  "00000000000000000000000xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6"
let newKey =  increaseHexByOne(
  web3.sha3(key + index, {"encoding":"hex"}))
console.log(web3.eth.getStorageAt(contractAddress,newKey))
console.log('ASCII: ' +
 web3.toAscii(web3.eth.getStorageAt(contractAddress, newKey)))
result:
0x6465766963655965617200000000000000000000000000000000000000000014
ASCII: deviceYear

uintarray also follows the similar way to access second, third value
