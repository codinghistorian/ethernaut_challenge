Vault
Difficulty 3/10

Unlock the vault to pass the level!


220310 03:37 I think there are two ways.

either
1)figure out what was the password (I think I can check etherscan to know what was in the constructor)

2)change
bool locked upstream from an inheriting contract.

03:42 KSt I found the transaction log in etherscan.

https://rinkeby.etherscan.io/tx/0x150bcbb70e971a7ba28c6f2e7cf39e5e141985f1314a77882d39c14fdc32a648

the input data was 

0xdfc86b17000000000000000000000000f94b476063b6379a3c8b6c836efb8b3e10ede188

so i think this is the password.

hm... keeps givign me error

220310 03:48 ah. the hex above is not password. it is input data, so I think it means
it's the data that was input when constructor was called.


How to decode input data from a transaction?
https://ethereum.stackexchange.com/questions/11144/how-to-decode-input-data-from-a-transaction

hex ToAscii
https://web3js.readthedocs.io/en/v1.2.9/web3-utils.html?highlight=toascii#hextoascii

web3.utils.hexToAscii(hex)

I will try this on the console.

I got this
"ÃŸÃˆk\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¹KG`cÂ¶7Âš<Â‹lÂƒnÃ»Â‹>\u0010Ã­Ã¡Âˆ"

ASCII to text
ï¿½F

hm.. when I do hex to text
ï¿½ï¿½ï¿½pï¿½ï¿½v;cyï¿½È¶ï¿½6ï¸³ï¿½ï¿½

I got this.


maybe I should try
https://ethereum.stackexchange.com/questions/8870/how-to-get-string-from-hex-on-smart-contracts-results
web3.utils.hexToUtf8

220310 04:05

I came here

https://cleanunicorn.github.io/santoku/#/

input data in the encoded abi
type List
bytes32 _password

then I got

0x000000000000000000000000f94b476063b6379a3c8b6c836efb8b3e10ede188

as value

so I do this in the console.
contract.unlock('0x000000000000000000000000f94b476063b6379a3c8b6c836efb8b3e10ede188');

hm...but when I checked the locked variable, still locked was true..

oh,so  it is the last alphabet that starts from f and so on that was the argument


220310 04:13
ohhh.. shit never mind. I should have put in encoded abi.

04:18 Now I tried this


https://ethtx.info/
and got 
this
https://ethtx.info/rinkeby/0x150bcbb70e971a7ba28c6f2e7cf39e5e141985f1314a77882d39c14fdc32a648/

I think this could be the password


I try this now 04:21 KST
await contract.unlock('0x000000000000000000000000a62db47d3ec641dc9430bc8e36a41a59fb33ee09');
hm....and it is still locked.

shibal
https://www.moesif.com/solidity-abi-hex-decoder/decode
when I usd this above

0xdfc86b17000000000000000000000000f94b476063b6379a3c8b6c836efb8b3e10ede188

decode
and the result is
Attempted to decode with createLevelInstance(address)

Error: hex string must have 0x prefix (arg="value", value="000000000000000000000000f94b476063b6379a3c8b6c836efb8b3e10ede188", version=4.0.49)

I was working with totally wrong input data.

220310 04:39 KST
okay. now this is the vault contract.
https://rinkeby.etherscan.io/address/0xa62db47d3ec641dc9430bc8e36a41a59fb33ee09#code


220310 05:00 KST
I think the below could bring me the answer

https://stackoverflow.com/questions/68496585/retrieve-argument-pass-to-constructor
Constructor arguments are encoded at the end of the deployed bytecode.



when I compile the vault contract in remix, this is what I get.
{
	"linkReferences": {},
	"object": "608060405234801561001057600080fd5b506040516101623803806101628339818101604052602081101561003357600080fd5b810190808051906020019092919050505060016000806101000a81548160ff021916908315150217905550806001819055505060ee806100746000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063cf309012146037578063ec9b5b3a146055575b600080fd5b603d6080565b60405180821515815260200191505060405180910390f35b607e60048036036020811015606957600080fd5b81019080803590602001909291905050506091565b005b60008054906101000a900460ff1681565b80600154141560b55760008060006101000a81548160ff0219169083151502179055505b5056fea2646970667358221220ed4f4243449d3140806cf6e8b0840f87c08eddd7e3748adb12c224cf3f12279d64736f6c634300060c0033",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x162 CODESIZE SUB DUP1 PUSH2 0x162 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP PUSH1 0xEE DUP1 PUSH2 0x74 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCF309012 EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xEC9B5B3A EQ PUSH1 0x55 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x7E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x91 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST DUP1 PUSH1 0x1 SLOAD EQ ISZERO PUSH1 0xB5 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED 0x4F TIMESTAMP NUMBER DIFFICULTY SWAP14 BALANCE BLOCKHASH DUP1 PUSH13 0xF6E8B0840F87C08EDDD7E3748A 0xDB SLT 0xC2 0x24 0xCF EXTCODEHASH SLT 0x27 SWAP14 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
	"sourceMap": "57:272:0:-:0;;;127:88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;180:4;171:6;;:13;;;;;;;;;;;;;;;;;;201:9;190:8;:20;;;;127:88;57:272;;;;;;"
}

so I guess this is the byte code. now gotta compare
608060405234801561001057600080fd5b506040516101623803806101628339818101604052602081101561003357600080fd5b810190808051906020019092919050505060016000806101000a81548160ff021916908315150217905550806001819055505060ee806100746000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063cf309012146037578063ec9b5b3a146055575b600080fd5b603d6080565b60405180821515815260200191505060405180910390f35b607e60048036036020811015606957600080fd5b81019080803590602001909291905050506091565b005b60008054906101000a900460ff1681565b80600154141560b55760008060006101000a81548160ff0219169083151502179055505b5056fea2646970667358221220ed4f4243449d3140806cf6e8b0840f87c08eddd7e3748adb12c224cf3f12279d64736f6c634300060c0033

deployed byte code from 
https://rinkeby.etherscan.io/address/0xa62db47d3ec641dc9430bc8e36a41a59fb33ee09#code
is

608060405234801561001057600080fd5b506040516101653803806101658339818101604052602081101561003357600080fd5b810190808051906020019092919050505060016000806101000a81548160ff021916908315150217905550806001819055505060f1806100746000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063cf309012146037578063ec9b5b3a146057575b600080fd5b603d6082565b604051808215151515815260200191505060405180910390f35b608060048036036020811015606b57600080fd5b81019080803590602001909291905050506094565b005b6000809054906101000a900460ff1681565b80600154141560b85760008060006101000a81548160ff0219169083151502179055505b5056fea264697066735822122089d8dcab0ee2a6e0d4b11a8b0624f50e782fb879a941ed2f1d39cad24fdf2b1c64736f6c63430006030033412076657279207374726f6e67207365637265742070617373776f7264203a29


89d8dcab0ee2a6e0d4b11a8b0624f50e782fb879a941ed2f1d39cad24fdf2b1c64736f6c63430006030033412076657279207374726f6e67207365637265742070617373776f7264203a29
the number above is the different thing.

https://web3-type-converter.onbrn.com/
when I turned into a string, it gave me
https://web3-type-converter.onbrn.com/

Â‰Ã˜ÃœÂ«Ã¢Â¦Ã Ã”Â±Â‹$Ãµx/Â¸yÂ©AÃ­/9ÃŠÃ’OÃŸ+dsolcC3A very strong secret password :)

I guess the secret password was
A very strong secret password :)   convertd into bytes32. I will try now

0x412076657279207374726f6e67207365637265742070617373776f7264203a29
this is the bytes32 of the password above

okay!I got it!

now locked is false.

Vault
Level completed!
Difficulty 3/10

It's important to remember that marking a variable as private only prevents other contracts from accessing it. State variables marked as private and local variables are still publicly accessible.
-> so does this mean there is a way to publicly access private variable in the smart contract?
oh, shit
https://studygroup.moralis.io/t/how-to-read-private-variables/38777/2
it is possible by accessing the storage.

To ensure that data is private, it needs to be encrypted before being put onto the blockchain. In this scenario, the decryption key should never be sent on-chain, as it will then be visible to anyone who looks for it. zk-SNARKs provide a way to determine whether someone possesses a secret parameter, without ever having to reveal the parameter.

