Gatekeeper One
Difficulty 5/10

Make it past the gatekeeper and register as an entrant to pass this level.

Things that might help:
Remember what you've learned from the Telephone and Token levels.
You can learn more about the special function gasleft(), in Solidity's documentation (see here and here).

220314 18:17 KST

I think first thing is to make sure that I call this enter() function from a contract.
and also need to use call function to specify gas.

when I did uint16(tx.origin) meaning my wallet address's uint16, it gave me 5285.

so..I think the key should give me the same number when uint64ed and uint32ed.

anyway, it needs to have 5285

so it should definitely have 14 A5 in the beginning of the key.


https://www.tutorialspoint.com/solidity/solidity_conversions.htm

refer to type conversion above.

220315 18:42 KST
clue1

0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c
uint16 => 0x14a5

0x00001415 is (uint32(uint64(_gateKey))
so basically, it means. last digits are 1415

clue2

(uint32(uint64(_gateKey)) != uint64(_gateKey)

for example if
0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c


left hand side of equation is
0x0000000000000000000000000000000000001415

40 jari.

right hand side is
0x0000000000000000000000000000000000001415

bytes8(64 bits) is uint64

there is something on the first part of bytes8 _key.

clue3

fuck it. I will just draw it on paper.

uint64 has 6 digits   2**6
uint16 has 4 digits   2**4
uint32 has 5 digits   2**5

so, the answer should be sth like

0xa014a5



220315 19:06 KST

let's try.

ah, shit. I need to make a smart contract too.

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract GateKeeperOne {
  address public target = 0x45306D070231294BfF371dbBe6cDED94bE1f079B;
  function goTo(bytes8 _haha) external {
      (bool success , ) = target.call(abi.encodeWithSignature("enter(bytes8)", _haha));
      require(success, "haha");
  }
}

220315 19:12 KST
0x105285
let's try this


a shibal. bit bytes uint dashi bok sup


220316 14:47 KST
hm... I think I need to think all the number as hex then do the conversion.

gotta do the conversion the way solidity does, not some internet converter does.

oh, and gas should have been specified.

contract GateKeeperOne {
  address public target = 0x45306D070231294BfF371dbBe6cDED94bE1f079B;
  function goTo(bytes8 _haha) external {
      (bool success , ) = target.call{gas: 819100}(abi.encodeWithSignature("enter(bytes8)", _haha));
      require(success, "haha");
  }
}

my wallet address is this
0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c

third require of gateThree.
when converted with uint16, only 4 hex remains.
0x946c

when converted to  uint64 leaves only 21 hex
0x7609dedCcE79a416E946c

when the above is converted to uint32, only 8 hex remains
0x416E946c

so, prolly the _gateKey has at the end of it.
0x0000946c

----------------------------

now the first requirement in gatekeyone
right hand side
0x946c

let hand side
0x0000946c
 again.. four zeros and 946c
-------------

anyway, 21 hex in the key. what I got so far is this below
0x0000946c

-----------------
requirement two.

0x7609dedCcE79a0000946c
0x?????????????0000946c
!=
0x0000946c


it means I just need to put in some number in the first part of the hex.

0xasdasdasdasda0000946c

I will try above.

first need to deploy smart contract.
220316 15:03 KST attempt second


0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c

0x0000000000000000000asdasdasdasda0000946c


0x111111110000946c


yeah. 

https://stackoverflow.com/questions/70447003/how-do-i-input-the-parameter-with-bytes4-type-in-remix
I did input 16 hex, but why not working?

220316 15:29 KST
okay. the key is alright but the gas is problem

0x111111110000946c


hm... they used only
https://rinkeby.etherscan.io/tx/0x51b7e0aa523ddfd841f355925fabfcdce19a3a3f6255d68d8a5119b8c0ff7997
27414 of gas.
maybe I should 27414 + 8191 as gas amount

15:46 KST hm.. maybe just 8191..?

hm... 8191000 also did not work.
so how much does gas cost...to call an external function and have a call function in it?
but still. when I call the other contract's function, I specified gas.
maybe I misunderstood mod() in safeMath?? but it should be safeMath's modulo. ain't it?

prolly 8191 too low gas. but.................................8191000 also did not work... wtf?


220407 00:13 KST


0xabcdefghijklmnop
0x        0000946c


0xijklmnop == 0xmnop

0x0000mnop != 0xabcdefghijklmnop

0x0000mnop == 946c

bytes8 is
0xabcdefgh0000946c

now the gas problem.


// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract GateKeeperOne {
  address public target = 0x45306D070231294BfF371dbBe6cDED94bE1f079B;
  function goTo(bytes8 _gateKey) external {
      (bool success , ) = target.call{gas: 819100000}(abi.encodeWithSignature("enter(bytes8)", _gateKey));
      require(success, "haha");
  }
}


I will just try thing. I know it ain't gonna work but still.

0xabcdefgh0000946c

... what's wrng with this?
0xabababab0000946c

I think gas.left() is the problem.


220407 16:11

I ran this code below to check how much require's revert

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;


contract RequireGasCheck {

  modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
  }

  function enter(bytes8 _gateKey) public gateOne returns (bool) {
    return true;
  }
}


and checked the OPCODEs.

I need to count till JUMPI  -> which in this case leads to revert but in the quiz does not.

remaining gas
beginning 79978736
after revert 79978488
after JUMPI before revert 79978504

beginning - after JUMPI = 232

now let's add 232 + 8190*100000 gas to the call

819000232. lEt's try with this.

220407 16:18 KST
okay. did not work.
I will just try to run the same code without gas.left() to see if my bytes8 is right.

0xabababab0000946c

16:22 KST
when I did the test withou gateTwo, it still didn't go through, shit. maybe the  bytes8 is not right.
ah, obviously. I was running the test in Javascript VM(Longdon).. need to change the bytes8.

0xabababab0000ddc4

okay. so it all went through. Now the issue is gas. how to specify gas correctly..

220407 16:30 KST
// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

// import '@openzeppelin/contracts/math/SafeMath.sol';

contract GatekeeperOne {

//   using SafeMath for uint256;
  address public entrant;
  uint256 public gasLeft1;
  uint256 public gasLeft2;
  modifier gateOne() {
    gasLeft1 = gasleft();
    require(msg.sender != tx.origin);
  
    _;
  }

//   modifier gateTwo() {
//     require(gasleft().mod(8191) == 0);
//     _;
//   }

  modifier gateThree(bytes8 _gateKey) {
      gasLeft2 = gasleft();
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}
I used the code above to check gasLefts. Let's just 
78723478 - 78701326
gasLeft1 - gasLeft2

2215  + 8191*10000

81912215


// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract GateKeeperOne {
  address public target = 0x45306D070231294BfF371dbBe6cDED94bE1f079B;
  // address public target = 0x9D7f74d0C41E726EC95884E0e97Fa6129e3b5E99;
  function goTo(bytes8 _gateKey) external {
      (bool success , ) = target.call{gas: 81912215}(abi.encodeWithSignature("enter(bytes8)", _gateKey));
      // require(success, "haha");
  }
}
16:35 KST
I tried code above. and the transaction went through. let's see if it worked .

m.... I shouldn't not have commented out require. It did not work.

0xabababab0000946c

test
0xabababab0000ddc4


78723478 - 78701326
gasLeft1 - gasLeft2

but this time. gasLeft2 is checked right after require.
22152 + 8191*10000

220407 17:05 KST
I am going to deploy the original code in JS VM to check gasleft()
but the issue was importing older version of safeMath. Anyway I made it.

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v3.x/contracts/math/SafeMath.sol';

contract GatekeeperOne {

  using SafeMath for uint256;
  address public entrant;

  modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    require(gasleft().mod(8191) == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}



// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v3.x/contracts/math/SafeMath.sol';

contract GatekeeperOne {

  using SafeMath for uint256;
  address public entrant;
  uint256 public gasYo1;
  uint256 public gasYo2;

  modifier gateOne() {
    gasYo1 = gasleft();
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    gasYo2 = gasleft();
    // require(gasleft().mod(8191) == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(tx.origin), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}

220407 17:12 KST
78722972 - 78700823

22149

22149 + 8191*100000

0xabababab0000946c

gasYo2 had 78720723
closest number that 8191 can get to that is
78723701 = 9611×8191


220407 20:54 KST

alright, let's try again in JS VM
0xabababab0000ddc4

gasYo1     gasYo2
78707088 - 78684939

Okay, I will try 78705126 now

220407 21:04 KST


gas input 78707319
gas left  78707052

gas input 78699395
gas left  78699128

ha... it worked in JS vm but does not work on Rinkeby.. wtf..

let's try 9 less from 78699395

78699382 x
78699384 x
78699386 x
78699388 x
78699389 x
78699390 x
78699395 x

0xabababab0000946c

okay. let's try 
78699395 - 20000

220408 00:44 KST
Now I will try to do this with them... JS VM. deployed the whole contract, Now I will try to 
tackle it there.

0xabababab0000ddc4

78699389 x


220408 01:27 KST
gas input 78699395
gasleft1  78699164
gasleft2  78696915


it means.. require() took 2249 gas

so what I need at gasleft2 is 78690937


before require cost 231
require costs 2249

78690937 + 231 + 2249

78693417

let's try above



220408 01:42 KST

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract PWN {
  address public target = 0x45306D070231294BfF371dbBe6cDED94bE1f079B;
  // address public target = 0x5e17b14ADd6c386305A32928F985b29bbA34Eff5;
  function goTo(bytes8 _gateKey) external {
      // (bool success , ) = target.call{gas: 78693417}(abi.encodeWithSignature("enter(bytes8)", _gateKey));
      (bool success , ) = target.call.gas(78691204)(abi.encodeWithSignature("enter(bytes8)", _gateKey));

                                          //  80000000
      require(success, "haha");
  }
}

Let's try this

dun work.

220408 03:26 KST

gas input  78691204
gasYo1     78690973
gasYo2     78668824

gas input  78691204
gasYo2     78690937


now I try this
78699395

0xabababab0000946c

maybe I need to think 
push1 0 ...?...so 0 is pushed to the stack before gasleft() is called. I think.
78691204 + 3
78691207

0408 03:50 KST
still did not work, shit.

220408 05:49 KST
since gas limit gas limit	3000000
lets try
1228650+267 = 1228917

220408 05:50 KST
should I run this on ganache and write scripts that literally tries all different gas..
this is too much. the level of this challenge is just 5, it should not be that hard.


220408 06:07 KST

when input  1500000
Yo2         1499755

245

1499198 = 183*8191 + 245

8191


220409 03:55 KST

14991203
14990958

245

81910 + 245 = 82155


oh.. when I did it in rinkeby, it gave different gas fee.

input   82155
gasleft 44511


37644 + 8191 * 15
160509

..when I changed the gas, it still gave me 44511..


220409 04:18
This guy
https://github.com/OpenZeppelin/ethernaut/issues/331
talks about locally forking openzeppelin contract with ^0.6.0 solidity SafeMath. and checking
all the gas cost through bytecodes one by one.
I think that is crazy so I will just try to make sure that my safeMath version as
exactly ^0.6.0;


shit. maybe I should also call the function and debug

0xabababab0000946c


220409 04:49

https://rinkeby.etherscan.io/address/0x45306D070231294BfF371dbBe6cDED94bE1f079B#code
maybe I should just jot down how much is spent?


shit...I natively thought I should just calculate all gas code till(including) GAS
but there is a lot of jump, so I need to make a similar contract that I made before
and run it...to count gas fees.


220409 05:29
Maybe the damn rinkeby version has issues.
I will try to solve it all in JS VM

I mean, when I checked the gasleft() it should be alright. hell is wrong with rinkeby


220409 13:03
in JS VM.
I again, calculated that it takes 245 until my gasleft() hits.
so I first did 245 + 8191 * 10 = 82155
did not work.
so I incremented by 3 it till it reaches 82164
and it worked.
maybe in the way I did it, did not fully represent the amount of gas being calculated
in the original smart contract.

Now I will try it on Rinkeby with 82164

220409 13:08 KST
SOLVED!

Gatekeeper One
Level completed!
Difficulty 5/10

Well done! Next, try your hand with the second gatekeeper...

