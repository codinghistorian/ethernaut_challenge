1010001101101110101011101001000100010010111001010011001011111010
0101110010010001010100010110111011101101000110101100110100000100

in hex
5C91516EED1ACD04

xor above will give me 2**64 -1



220410 01:54 KST
1100010011111001000011011100101100010101011001100101000001001010
0011101100000110111100100011010011101010100110011010111110110100

C4F90DCB1566504A

220410 02:06 KST
when I checked caller() opcode, it gave different address... not the address I calculated.
Gotta dig deeper how to calculate the address of a contract generated from a factory.

220410 02:39 KST
I guess the rlp encoding was wrong.

10000101001001110011010100100000101110001111011010110010000001
01111010110110001100101011011111010001110000100101001101111111

1EB632B7D1C2537F


hm... caller gave me

c5322054df297f97d9227bffc3a8e62307f6a07c

aah


c5322054df297f97d9227bffc3a8e62307f6a07c
this is not what I calculated
but
when I calculate with nonce1, it gave me this.
so it seems like, I need to count from 1 when I make a new smart contract!

https://www.rapidtables.com/convert/number/decimal-to-binary.html
https://www.rapidtables.com/convert/number/binary-to-hex.html

101001100010100001110110000100100101100011100110110001111
010110011101011110001001111011011010011100011001001110001

B3AF13DB4E3271


1100100111000011101101001000011010110101110000010110000100100100
00110


10101110011111101010011010001110100111111010011010110010001
01010001100000010101100101110001011000000101100101001101111

28C0ACB8B02CA6F


220411 17:05
I was wrong in two things.
First, should never touch storage varaible to make constructor low-level call some other contract
with no ext code.
Second, 2**64-1 was not ..... 11111111111111111111110
it was 1111111111111111111

