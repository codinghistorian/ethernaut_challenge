MagicNumber
Difficulty 6/10

To solve this level, you only need to provide the Ethernaut with a Solver, a contract that responds to whatIsTheMeaningOfLife() with the right number.

Easy right? Well... there's a catch.

The solver's code needs to be really tiny. Really reaaaaaallly tiny. Like freakin' really really itty-bitty tiny: 10 opcodes at most.

Hint: Perhaps its time to leave the comfort of the Solidity compiler momentarily, and build this one by hand O_o. That's right: Raw EVM bytecode.

Good luck!

220414 14:53 KST
So I can just put any number for the function to work..?

Maybe I should learn how to deploy a RAW evm code.

MAybe I will just try it in JS vm.

220414 16:57 KST
Maybe I should just use this bytecode deployer?
https://github.com/Sekin/ethereum-bytecode-deployment


220414 17:10 KST
or maybe I should just try to write opcodes myself.

so
0)should be able to copy calldata
1)need to check function selector whatIsTheMeaningOfLife()
2)Need to somehow match the number inside calldata to a predefined number.

I think this shouldbe enough.

I gotta check how to deal with calldata
and also how to compare.



220419 02:38 KST

1)check if data has the same selector as whatIsTheMeaningOfLife()
2)if not, revert
3)if yes, try eq with a certain number
4)then...return true or just end code

0xcdcd77c0: the Method ID. This is derived as the first 4 bytes of the Keccak hash of the ASCII form of the signature baz(uint32,bool).

function selector of whatIsTheMeaningOfLife(256) is 

ca47e49a

push4 650500c1
CALLDATALOAD
push 


220419 03:35 KST

okay. let's try to just write a simple solidity code
and try to simplify the bytecode of it
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract A {
    function whatIsTheMeaningOfLife(uint rightNumber) external pure returns(bool result){
        if(rightNumber == 3){
            return true;
        }
    }
}

{
	"generatedSources": [],
	"linkReferences": {},
	"object": "608060405234801561001057600080fd5b5061012e806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ca47e49a14602d575b600080fd5b60436004803603810190603f91906082565b6057565b604051604e919060b5565b60405180910390f35b6000600382141560695760019050606a565b5b919050565b600081359050607c8160e4565b92915050565b600060208284031215609357600080fd5b6000609f84828501606f565b91505092915050565b60af8160ce565b82525050565b600060208201905060c8600083018460a8565b92915050565b60008115159050919050565b6000819050919050565b60eb8160da565b811460f557600080fd5b5056fea264697066735822122086be0f45273a0d579ea5f94ecd49b615cd3104aeb66404c364ebb26e7a52196764736f6c63430008000033",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x43 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH1 0x3F SWAP2 SWAP1 PUSH1 0x82 JUMP JUMPDEST PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x4E SWAP2 SWAP1 PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 EQ ISZERO PUSH1 0x69 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0x6A JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x7C DUP2 PUSH1 0xE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F DUP5 DUP3 DUP6 ADD PUSH1 0x6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAF DUP2 PUSH1 0xCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xEB DUP2 PUSH1 0xDA JUMP JUMPDEST DUP2 EQ PUSH1 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xBE 0xF GASLIMIT 0x27 GASPRICE 0xD JUMPI SWAP15 0xA5 0xF9 0x4E 0xCD 0x49 0xB6 ISZERO 0xCD BALANCE DIV 0xAE 0xB6 PUSH5 0x4C364EBB2 PUSH15 0x7A52196764736F6C63430008000033 ",
	"sourceMap": "58:175:0:-:0;;;;;;;;;;;;;;;;;;;"
}

editing code
	"object": "60 80 60 40 52
    348015
    610010
    57
    60
    00
    80
    fd
    5b
    50
    61012e
    80610020
    6000
    396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ca47e49a14602d575b600080fd5b60436004803603810190603f91906082565b6057565b604051604e919060b5565b60405180910390f35b6000600382141560695760019050606a565b5b919050565b600081359050607c8160e4565b92915050565b600060208284031215609357600080fd5b6000609f84828501606f565b91505092915050565b60af8160ce565b82525050565b600060208201905060c8600083018460a8565b92915050565b60008115159050919050565b6000819050919050565b60eb8160da565b811460f557600080fd5b5056fea264697066735822122086be0f45273a0d579ea5f94ecd49b615cd3104aeb66404c364ebb26e7a52196764736f6c63430008000033",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE 
    CALLVALUE DUP1 ISZERO 
    PUSH2 0x10 
    JUMPI 
    PUSH1 
    0x0 
    DUP1 
    REVERT 
    JUMPDEST 
    POP 
    PUSH2 0x12E 
    DUP1 PUSH2 0x20 
    PUSH1 0x0 
    CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x43 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH1 0x3F SWAP2 SWAP1 PUSH1 0x82 JUMP JUMPDEST PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x4E SWAP2 SWAP1 PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 EQ ISZERO PUSH1 0x69 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0x6A JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x7C DUP2 PUSH1 0xE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F DUP5 DUP3 DUP6 ADD PUSH1 0x6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAF DUP2 PUSH1 0xCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xEB DUP2 PUSH1 0xDA JUMP JUMPDEST DUP2 EQ PUSH1 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xBE 0xF GASLIMIT 0x27 GASPRICE 0xD JUMPI SWAP15 0xA5 0xF9 0x4E 0xCD 0x49 0xB6 ISZERO 0xCD BALANCE DIV 0xAE 0xB6 PUSH5 0x4C364EBB2 PUSH15 0x7A52196764736F6C63430008000033 ",

    220419 03:45 KST.. um... too long.. better just make it on my own.



    220419 03:59 KST

    PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT
    So... SHR(0xE0, CALLDATALOAD) and
    the result will be EQed with 0xCA47E49A
    and why is that?
    0xCA47E49A???????????????????????????????
    0xE0 is 224
    32*8 = 256
    256 - 224 = 32 = 8 bytes(which is the function selector)
    so it seems Like
        0xCA47E49A???????????????????????????????
    turns to just
        0xCA47E49A
        shift logical right seems to get rid of the value...
        I would rather look at it as shit hout right.


    so I guess I can deploy

    PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xCA47E49A EQ 
    in the beginning
    m...then when can I do EQ of the parameter...and the number I want to be equal to it..

    aaah, so I can do calldataload but SHR a bit differently
    for example, I can do 0xDE and um... would this work?
    cuz 0xCA47E49A00000000000...........00000000000001 sth like this.
    ah, fuck it. I will just 
    0xDE and EQ it with 0xCA47E49A 

    PUSH1 0x0 CALLDATALOAD PUSH1 0xDE SHR PUSH4 0xCA47E49A0 EQ 
    but the problem is.. how the hell do I return anything? cuz then I would have to MSTORE
    the value I want to return to the memory...

    60003560E01C63CA47E49A14

    hm... should I deploy it with abi attached..?

220419 05:08 KST
Okay. now imma just send transactino without to, containing just 10 bytecodes in data
    sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", to: "0x33A83D7bF84D70B21a2C9E72C09e258CC9D50B6d", data: "0x6fab5ddf", value: toWei("0.001")}).then((receipt)=> {console.log(receipt)});

    await sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", data: "60003560DE1C63CA47E49A014"});

    transactino hash below
    0x680a0019c051ae13231c19522430f66b18c44e13703e467646c59c8814f0fc70

    shiit. but the transactino failed.
    in the rinkeby scan it all looks like its good tho.


    aaa, alright. now imma try with 
    60003560E01C63CA47E49A14

        await sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", data: "60003560E01C63CA47E49A14"});

    contract created properly this time, but submission failed.


    aaauuuu maybe I should read this article below
    https://ha  ckmd.io/@e18r/r1yM3rCCd#1-Environment-setup
    and also .. what was that
    https://blog.openzeppelin.com/deconstructing-a-solidity-contract-part-i-introduction-832efd2d7737/
    maybe I should go through this to understand better about bytecode

    220419 12:47 KST
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xE0
    SHR           .. leaves just the function selector
    PUSH4 0xCA47E49A
    EQ

    ..and MSTORE
    return

    60 01
    60 00
    f3

220419 12:59 KST
what if I just directly copy the calldata to memory and return?
    calldatacopy(0x80, 0, 4)       .. calldatacopy first 4 bytes from 0 to memory 0x80
    
    PUSH1 0x04
    PUSH1 0x00
    PUSH1 0X80
    CALLDATACOPY


    MLOAD()
    PUSH4 0xCA47E49A
    EQ

    220419 13:06 KST
    DOES IT ALWAYS HAVE TO RETURN STH?
    I MEAN, WHY CAN'T IT JUST THROW .. WHATEVER.

    or just
    PUSH1 0
    CALLDATALOAD
    
    220419 13;17 KST
    hm.. what if I just return boolean from EQ
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xE0
    SHR           .. leaves just the function selector
    PUSH4 0xCA47E49A
    EQ
    
    MSTORE
    0x01
    0x80
    RETURN

    220422 13:52 KST
    so, basically it does not have to return anything.
    It can basically just 'stop' and that's it.


    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xE0
    SHR 
    PUSH4 0xCA47E49A
    EQ    -12
    PUSH1 0x0F   
    JUMPI -14
    JUMPDEST   -15
    STOP
    
    0x60003560E01C63CA47E49A14600F575B00

    220422 14:00 KST
    I mean..now I need to shove in the right number. But that number comes from the calldata.
    the whole process of manipulating calldata is like...at east 3,4 opcodes...
    shit. I will try the one above anyway. Let's see what happens.

    0x60003560E01C63CA47E49A14600F575B00
    
    Now I need to send transaction. Let's try it with web3.js

    await sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", data: "0x60003560E01C63CA47E49A14600F575B00"});

    https://rinkeby.etherscan.io/tx/0x28847b98db67903805041e3bae217338358c085f88d575fcee529bdc90d312ae

    0x09ee9cf660afd55161276505d44c4061a0ea2b6b
    contract above created!
    I wanna put it into the solver. I know it's gonna fail but what the hell.


    220422 14:09 KST
    I think I need to check who checks if the solution is right.
    when is being checked when 

    14:17 KST
    yeah. let's see what the checking function is actually trying to do.
    I can check two things
    1)Rinekby scanner to track down the origin
    2)Just go to ethernaut github.

    Chajatda yonom!

    https://rinkeby.etherscan.io/address/0x35be6ebd810edbeb2e9ae38e72ee2a46462336cf#internaltx


    https://rinkeby.etherscan.io/address/0x200d3d9ac7bfd556057224e7aeb4161fed5608d0#code

    so it is this 0x200 blablabla.
    Let's decompile this mofo.


    shit
    220422 14:28 KST
    so when we look at the instance checking function
    there is require calldatasize - 4 > 64
    meaning the calldata should have a size of 
    max 68 bits(=8 bytes).
    but man, here is the thing.
    that -4 is 1 hex.
    which is just good enough to have a number
    so the calldata
    should have
    function signature(8 bytes) + 1 hex

    that one hex should be...um...1 hex.. but....hm.... oh, maybe 0?
    let's try to make function signature with uint8. honextly, this is like two hexes
    but if the value i 0, I think it should work.
    or.... we can make it as boolean.

    220422 14:36 KST
    um... I just realized. that 
      require calldata.size - 4 >= 64
      is not...for ................whatever i was explaning above.
      I think I need to take a closer look at what kind of return
      this function is trying to get to return a 1.

def unknownd38def5b(addr _param1): # not payable
  require calldata.size - 4 >= 64
  require ext_code.size(_param1)
  static call _param1.solver() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  require ext_code.size(addr(ext_call.return_data))
  static call addr(ext_call.return_data).whatIsTheMeaningOfLife() with:
          gas gas_remaining wei
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data == 42:
      if ext_code.size(ext_call.return_data <= 10:
          return 1
      else:
          return 0 
  else:
      return 0


    220422 15:00 KST 
    I will come back tomorrow. 

    220423 11:37 KST
    I think we need to trace back where the 'submit instance' is called to see what are the conditions
    that my code is passed.
    But... I think maybe I can just try to make 
    keccak256(whatIsTheMeaningOfLife(uint8)) + 2
    function signature + one number parameter.
    I think it is worth trying this way.
    Let's do it.

    

    11:42 KST first attempt to make bytecode
    The calldata should be like what I said above,
    so let's try.

    keccak256(whatIsTheMeaningOfLife(uint8)) =
    bf68140ec5a7fa7a1c1d60305282b41b704a833801e4611612447b410dd3a43a

    bf68140e   <- function signature.
    CALLDATA should be ....um.......... 0xbf68140e02
    let's just put 02 as parameter.
    
####before####
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xE0   <-224   224/8 = 28bytes    and I need to do one byte  27*8 = 216 = 0xD8
    SHR 
    PUSH4 0xCA47E49A  <- should be updated
    EQ    -12
    PUSH1 0x0F   
    JUMPI -14
    JUMPDEST   -15
    STOP

####after####       0xbf68140e02 version
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xD8
    SHR 
    PUSH4 0xbf68140e02               <-if this doesn't work work on the version below
    EQ    
    PUSH1 0x10     
    JUMPI
    JUMPDEST
    STOP
                  0xCA47E49A
    0x60003560D81C63bf68140e02146010575B00
    11:57 KST
    Let's try!
    .. transactionf failed....?
    12:07 KST
    okay. Let's try to trace back to the guy who checks whether the contract has passed
    or not.



####after####       0xbf68140e2 version
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0x1E      <- should now be  240/8 in hex which is 0x1E
    SHR 
    PUSH4 0xbf68140e2               <-if this doesn't work
    EQ    
    PUSH1 0x0F   
    JUMPI
    JUMPDEST  
    STOP    

    220423 12:20 KST
    It seems like it just have to pass.
    No need to make no parameter.
    No Nothing.
    So I will make the function signature one more time without any parameter


    ####attempt 12:23 KST####
    PUSH1 0x00
    CALLDATALOAD
    PUSH1 0xE0
    SHR 
    PUSH4 0x650500c1  <- should be updated
    EQ    
    PUSH1 0x10
    JUMPI -15
    JUMPDEST   -16
    STOP

    0x60003560E01C63650500c1146010575B00

    keccak256(whatIsTheMeaningOfLife()) =
    650500c15ce33a97ad219acb4e19e643d45dc96f54e4ebdc9a34689cbc433599

    220423 12:25 KSt
    IF THIS THING ABOVE DOES NOT WORK, I WILL CALLDATACOPY AND THEN RETURN

    12:30 KST
    attempt with
    0x60003560E01C63650500c1146010575B00


    https://rinkeby.etherscan.io/tx/0x3855952d0959374dcb6917f08d6161988b130e672fb08436c8e6598bd92a3e7a
    contract address
    0xc58fc8bf2fef9db27e546ee58ef4cf2478e29c7e

    Okay, it failed. So I will try to return sth this time.
    what if I just try to return just boolean?
    
    PUSH1 1
    PUSH1 0x80
    MSTORE
    PUSH1 0x01
    PUSH1 0x80
    RETURN

    0x600160805260016080F3

    12:40 KST

    failed, so I guess.... I do need to add the function
    whatIsTheMeaningOfLife()
    cuz, ye know, obviously the checker smart contract calls that function.
    hm... this time I can think of two solutions
    1)make a simple function that just returns a bool with solidity and cut down the shit.
    2)try again with the bytecode above but just add this function condition.

    I should try the first one.



    {
	"generatedSources": [],
	"linkReferences": {},
	"object": "608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063650500c114602d575b600080fd5b60336047565b604051603e9190605d565b60405180910390f35b60006001905090565b6057816076565b82525050565b6000602082019050607060008301846050565b92915050565b6000811515905091905056fea264697066735822122065f77b218380f9983d1a1ac474fa5fa421e71dd86be90839aa215b5b3ac7722264736f6c63430008000033",
	"opcodes": "
    
    PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT 
    JUMPDEST POP PUSH1 0xB8 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x650500C1 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x57 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x70 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0xF77B218380F9 SWAP9 RETURNDATASIZE BYTE BYTE 0xC4 PUSH21 0xFA5FA421E71DD86BE90839AA215B5B3AC772226473 PUSH16 0x6C634300080000330000000000000000 ",
}

    220423 12:52 KST
    okay. I think in order to fully deal with these bytecodes, I need to go back to this course of EVM under the hood. I have it on my phone.
    I will just try to read it from the start.