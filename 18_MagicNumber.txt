MagicNumber
Difficulty 6/10

To solve this level, you only need to provide the Ethernaut with a Solver, a contract that responds to whatIsTheMeaningOfLife() with the right number.

Easy right? Well... there's a catch.

The solver's code needs to be really tiny. Really reaaaaaallly tiny. Like freakin' really really itty-bitty tiny: 10 opcodes at most.

Hint: Perhaps its time to leave the comfort of the Solidity compiler momentarily, and build this one by hand O_o. That's right: Raw EVM bytecode.

Good luck!

220414 14:53 KST
So I can just put any number for the function to work..?

Maybe I should learn how to deploy a RAW evm code.

MAybe I will just try it in JS vm.

220414 16:57 KST
Maybe I should just use this bytecode deployer?
https://github.com/Sekin/ethereum-bytecode-deployment


220414 17:10 KST
or maybe I should just try to write opcodes myself.

so
0)should be able to copy calldata
1)need to check function selector whatIsTheMeaningOfLife()
2)Need to somehow match the number inside calldata to a predefined number.

I think this shouldbe enough.

I gotta check how to deal with calldata
and also how to compare.



220419 02:38 KST

1)check if data has the same selector as whatIsTheMeaningOfLife()
2)if not, revert
3)if yes, try eq with a certain number
4)then...return true or just end code

0xcdcd77c0: the Method ID. This is derived as the first 4 bytes of the Keccak hash of the ASCII form of the signature baz(uint32,bool).

function selector of whatIsTheMeaningOfLife(256) is 

ca47e49a

push4 650500c1
CALLDATALOAD
push 


220419 03:35 KST

okay. let's try to just write a simple solidity code
and try to simplify the bytecode of it
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract A {
    function whatIsTheMeaningOfLife(uint rightNumber) external pure returns(bool result){
        if(rightNumber == 3){
            return true;
        }
    }
}

{
	"generatedSources": [],
	"linkReferences": {},
	"object": "608060405234801561001057600080fd5b5061012e806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ca47e49a14602d575b600080fd5b60436004803603810190603f91906082565b6057565b604051604e919060b5565b60405180910390f35b6000600382141560695760019050606a565b5b919050565b600081359050607c8160e4565b92915050565b600060208284031215609357600080fd5b6000609f84828501606f565b91505092915050565b60af8160ce565b82525050565b600060208201905060c8600083018460a8565b92915050565b60008115159050919050565b6000819050919050565b60eb8160da565b811460f557600080fd5b5056fea264697066735822122086be0f45273a0d579ea5f94ecd49b615cd3104aeb66404c364ebb26e7a52196764736f6c63430008000033",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x43 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH1 0x3F SWAP2 SWAP1 PUSH1 0x82 JUMP JUMPDEST PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x4E SWAP2 SWAP1 PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 EQ ISZERO PUSH1 0x69 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0x6A JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x7C DUP2 PUSH1 0xE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F DUP5 DUP3 DUP6 ADD PUSH1 0x6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAF DUP2 PUSH1 0xCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xEB DUP2 PUSH1 0xDA JUMP JUMPDEST DUP2 EQ PUSH1 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xBE 0xF GASLIMIT 0x27 GASPRICE 0xD JUMPI SWAP15 0xA5 0xF9 0x4E 0xCD 0x49 0xB6 ISZERO 0xCD BALANCE DIV 0xAE 0xB6 PUSH5 0x4C364EBB2 PUSH15 0x7A52196764736F6C63430008000033 ",
	"sourceMap": "58:175:0:-:0;;;;;;;;;;;;;;;;;;;"
}

editing code
	"object": "60 80 60 40 52
    348015
    610010
    57
    60
    00
    80
    fd
    5b
    50
    61012e
    80610020
    6000
    396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ca47e49a14602d575b600080fd5b60436004803603810190603f91906082565b6057565b604051604e919060b5565b60405180910390f35b6000600382141560695760019050606a565b5b919050565b600081359050607c8160e4565b92915050565b600060208284031215609357600080fd5b6000609f84828501606f565b91505092915050565b60af8160ce565b82525050565b600060208201905060c8600083018460a8565b92915050565b60008115159050919050565b6000819050919050565b60eb8160da565b811460f557600080fd5b5056fea264697066735822122086be0f45273a0d579ea5f94ecd49b615cd3104aeb66404c364ebb26e7a52196764736f6c63430008000033",
	"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE 
    CALLVALUE DUP1 ISZERO 
    PUSH2 0x10 
    JUMPI 
    PUSH1 
    0x0 
    DUP1 
    REVERT 
    JUMPDEST 
    POP 
    PUSH2 0x12E 
    DUP1 PUSH2 0x20 
    PUSH1 0x0 
    CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x43 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH1 0x3F SWAP2 SWAP1 PUSH1 0x82 JUMP JUMPDEST PUSH1 0x57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x4E SWAP2 SWAP1 PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x3 DUP3 EQ ISZERO PUSH1 0x69 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0x6A JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x7C DUP2 PUSH1 0xE4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH1 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F DUP5 DUP3 DUP6 ADD PUSH1 0x6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xAF DUP2 PUSH1 0xCE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xC8 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0xA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xEB DUP2 PUSH1 0xDA JUMP JUMPDEST DUP2 EQ PUSH1 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0xBE 0xF GASLIMIT 0x27 GASPRICE 0xD JUMPI SWAP15 0xA5 0xF9 0x4E 0xCD 0x49 0xB6 ISZERO 0xCD BALANCE DIV 0xAE 0xB6 PUSH5 0x4C364EBB2 PUSH15 0x7A52196764736F6C63430008000033 ",

    220419 03:45 KST.. um... too long.. better just make it on my own.



    220419 03:59 KST

    PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA47E49A EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT
    So... SHR(0xE0, CALLDATALOAD) and
    the result will be EQed with 0xCA47E49A
    and why is that?
    0xCA47E49A???????????????????????????????
    0xE0 is 224
    32*8 = 256
    256 - 224 = 32 = 8 bytes(which is the function selector)
    so it seems Like
        0xCA47E49A???????????????????????????????
    turns to just
        0xCA47E49A
        shift logical right seems to get rid of the value...
        I would rather look at it as shit hout right.


    so I guess I can deploy

    PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xCA47E49A EQ 
    in the beginning
    m...then when can I do EQ of the parameter...and the number I want to be equal to it..

    aaah, so I can do calldataload but SHR a bit differently
    for example, I can do 0xDE and um... would this work?
    cuz 0xCA47E49A00000000000...........00000000000001 sth like this.
    ah, fuck it. I will just 
    0xDE and EQ it with 0xCA47E49A 

    PUSH1 0x0 CALLDATALOAD PUSH1 0xDE SHR PUSH4 0xCA47E49A0 EQ 
    but the problem is.. how the hell do I return anything? cuz then I would have to MSTORE
    the value I want to return to the memory...

    60003560E01C63CA47E49A14

    hm... should I deploy it with abi attached..?

220419 05:08 KST
Okay. now imma just send transactino without to, containing just 10 bytecodes in data
    sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", to: "0x33A83D7bF84D70B21a2C9E72C09e258CC9D50B6d", data: "0x6fab5ddf", value: toWei("0.001")}).then((receipt)=> {console.log(receipt)});

    await sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", data: "60003560DE1C63CA47E49A014"});

    transactino hash below
    0x680a0019c051ae13231c19522430f66b18c44e13703e467646c59c8814f0fc70

    shiit. but the transactino failed.
    in the rinkeby scan it all looks like its good tho.


    aaa, alright. now imma try with 
    60003560E01C63CA47E49A14

        await sendTransaction({from: "0x14a5b8f7DF340D89F3f7609dedCcE79a416E946c", data: "60003560E01C63CA47E49A14"});

    contract created properly this time, but submission failed.


    aaauuuu maybe I should read this article below
    https://hackmd.io/@e18r/r1yM3rCCd#1-Environment-setup
    and also .. what was that
    https://blog.openzeppelin.com/deconstructing-a-solidity-contract-part-i-introduction-832efd2d7737/
    maybe I should go through this to understand better about bytecode


